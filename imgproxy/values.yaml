---
# Docker image repository, tag, policy and secrets for Kubernetes to pull it.
image:
  repo: darthsim/imgproxy
  tag: v2.16.6
  pullPolicy: IfNotPresent
  pullSecrets:
    enabled:  false
    registry: ""
    username: ""
    password: ""

# Configure K8s resources
resources:

  deployment:
    # https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/#pod-priority
    priority:

      # The name of the priority class to be used in both pod.PriorityClassName
      # and the PriorityClass (when a level is above 0).
      # When a level is not set, or set to 0 (default), then the definition
      # of the corresponding PriorityClass is up to the user.
      # You can use system names like `set-cluster-critical` and `set-node-critical` as well,
      # in this case the class won't be created and level is ignored.
      name: ""

      # If the level is above 0, then a correspoding PriorityClass will be created
      # and assigned to the pod by the `PriorityClassName`
      level: 0

      # This setting is supported in K8s v1.19+, otherwise it will be ignored
      # https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/#non-preempting-priority-class
      preempting: true

    annotations: {}

    # How many instances of imgproxy you desire to spin up.
    replicaCount: 1

    # A node selector label.
    nodeSelector: {}

    # Node and inter-pod affinity configuration
    affinity: {}

    # Toleration for K8s taints
    tolerations: []

    # Set kubernetes specific resource limits
    resources: {}
    # limits:
    #   cpu: 700m
    #   memory: 700Mi
    # requests:
    #   cpu: 700m
    #   memory: 700Mi

    # Timeuouts and counters options for Readiness probe
    readinessProbe:
      initialDelaySeconds: 10
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5

    # Timeuouts and counters options for Liveness probe
    livenessProbe:
      initialDelaySeconds: 50
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5

  # List names of the custom secrets with env variables to be added
  # from the external resources (like Vault, AWS etc.)
  #
  # You're up to generating those secrets in any way, either manually
  # or via some CRD like https://github.com/external-secrets/kubernetes-external-secrets
  # We won't make any suggestions about the content of the secrets,
  # it will be added to the imgproxy pods as a plain lists of environment variables.
  # These variables would overload those passed through the secret provided by the chart.
  #
  # Example:
  #   externalSecrets:
  #     - my_manual_secret
  addSecrets: []

  service:
    type: ClusterIP
    loadBalancerIP: ""
    externalTrafficPolicy: Cluster
    loadBalancerSourceRanges:
    # - 192.168.1.1/24
    # - 10.0.0.1/20

  serviceAccount:

    # Add custom annotations to the Service Account
    # in addition to those we already provided for AWS IAM role
    # (see features.aws.iamRoleName and features.aws.accountId).
    annotations: {}

  ingress:
    enabled: false
    health:
      whitelist: # 127.0.0.1/32
    annotations: {}
    #   kubernetes.io/ingress.class: nginx
    #   kubernetes.io/tls-acme: "true"
    hosts: []
    #   - example.com
    #   - www.example.com
    tls: []
    #   - secretName: example-com-tls
    #     hosts:
    #       - example.com
    #       - www.example.com

  serviceMonitor:
    honorLabels: true
    interval: 0
    namespace: ""
    selector:
      release: prometheus-operator
    targetLabels:
      - app
      - release

  podDisruptionBudget:
    enabled: true
    minAvailable: 0
    maxUnavailable: 0

  pod:
    annotations: {}
    labels: {}

# Configure imgproxy features
# https://docs.imgproxy.net/#/configuration
features:

  # https://docs.imgproxy.net/#/configuration?id=url-signature
  urlSignature:

    # If URL signature is enabled
    enabled: true

    # ENV['IMGPROXY_KEY']
    # Hex-encoded key for URL encoding. CHANGE IT!!!!
    key: 1b147116e57d9e06df3696b21260169902fe201ccdb9715267999176ccbfaae6f2c2b75b78110d0287643d98cde143e7a3f98a46ec825a1ab7ea10af426c2436

    # ENV['IMGPROXY_SALT']
    # Hex-encoded salt for URL encoding. CHANGE IT!!!!
    salt: 1e4483006c56f05f1b42af2f2b61765f64b8a074bf993922dd5b4bca78f49280683beb368308b7f76d522027b071a25e6d4b26138686b43e1faa4be4c9b674ea

    # ENV['IMGPROXY_SIGNATURE_SIZE']
    # number of bytes to use for signature before encoding to Base64.
    signatureSize: 32

  # https://docs.imgproxy.net/#/configuration?id=server
  server:

    # ENV['IMGPROXY_READ_TIMEOUT']
    # The maximum duration (in seconds) for reading the entire image request, including the body
    readTimeout: 10

    # ENV['IMGPROXY_WRITE_TIMEOUT']
    # The maximum duration (in seconds) for writing the response
    writeTimeout: 10

    # ENV['IMGPROXY_KEEP_ALIVE_TIMEOUT']
    # the maximum duration (in seconds) to wait for the next request before closing the connection.
    # When set to 0, keep-alive is disabled.
    keepAliveTimeout: 10

    # ENV['IMGPROXY_DOWNLOAD_TIMEOUT']
    # The maximum duration (in seconds) for downloading the source image
    downloadTimeout: 5

    # ENV['IMGPROXY_CONCURRENCY']
    # The maximum number of image requests to be processed simultaneously.
    # Default: double number of CPU cores
    concurrency: ""

    # ENV['IMGPROXY_MAX_CLIENTS']
    # The maximum number of simultaneous active connections.
    # Default: concurrency * 10
    maxClients: ""

    # ENV['IMGPROXY_TTL']
    # Duration in seconds sent in Expires and Cache-Control: max-age headers.
    ttl: 3600

    # ENV['IMGPROXY_CACHE_CONTROL_PASSTHROUGH']
    # when true and source image response contains Expires or Cache-Control headers, reuse those headers
    cacheControlPassthrough: false

    # ENV['IMGPROXY_SET_CANONICAL_HEADER']
    # when true and the source image has http or https scheme, set rel="canonical" HTTP header to the value of the source image URL.
    setCanonicalHeader: false

    # ENV['IMGPROXY_SO_REUSEPORT']
    # when true, enables SO_REUSEPORT socket option (currently on linux and darwin only)
    soReuseport: false

    # ENV['IMGPROXY_PATH_PREFIX']
    # URL path prefix.
    # Example: when set to /abc/def, imgproxy URL will be /abc/def/%signature/%processing_options/%source_url
    pathPrefix: ""

    # ENV['IMGPROXY_USER_AGENT']
    # User-Agent header that will be sent with source image request.
    # Default: imgproxy/%current_version
    userAgent: ""

    # ENV['IMGPROXY_USE_ETAG']
    # When true, enables using ETag header for the cache control
    useEtag: false

    # ENV['IMGPROXY_CUSTOM_REQUEST_HEADERS']
    # PRO: list of custom headers that imgproxy will send while requesting the source image, divided by \;
    # (can be redefined by IMGPROXY_CUSTOM_HEADERS_SEPARATOR)
    customRequestHeaders: ""

    # ENV['IMGPROXY_CUSTOM_RESPONSE_HEADERS']
    # PRO: list of custom response headers, divided by \; (can be redefined by IMGPROXY_CUSTOM_HEADERS_SEPARATOR)
    customResponseHeaders: ""

    # ENV['IMGPROXY_CUSTOM_HEADERS_SEPARATOR']
    # PRO: string that will be used as a custom headers separator;
    customHeadersSeparator: ";"

    # ENV['IMGPROXY_ENABLE_DEBUG_HEADERS']
    # when true, imgproxy will add X-Origin-Content-Length header with the value is size of the source image.
    enableDebugHeaders: false

  # https://docs.imgproxy.net/#/configuration?id=security
  security:

    # ENV['IMGPROXY_SECRET']
    # the authorization token. If specified, the HTTP request should contain the `Authorization: Bearer %secret%` header
    secret: ""

    # ENV['IMGPROXY_MAX_SRC_RESOLUTION']
    # the maximum resolution of the source image, in megapixels. Images with larger actual size will be rejected.
    maxSrcResolution: "16.8"

    # ENV['IMGPROXY_MAX_SRC_FILE_SIZE']
    # The maximum size of the source image, in bytes. Images with larger file size will be rejected.
    # When `0`, file size check is disabled.
    maxSrcFileSize: 0

    # ENV['IMGPROXY_MAX_ANIMATION_FRAMES']
    # the maximum of animated image frames to being processed.
    maxAnimationFrames: 1

    # ENV['IMGPROXY_MAX_SVG_CHECK_BYTES']
    # the maximum number of bytes imgproxy will read to recognize SVG.
    # If imgproxy can't recognize your SVG, try to increase this number.
    maxSvgCheckBytes: 32768 # 32KB

    # ENV['IMGPROXY_ALLOW_ORIGIN']
    # when set, enables CORS headers with provided origin. CORS headers are disabled by default.
    allowOrigin: false

    # ENV['IMGPROXY_ALLOWED_SOURCES']
    # whitelist of source image URLs prefixes divided by comma. When blank, imgproxy allows all source image URLs.
    # Example: `s3://,https://example.com/,local://`.
    allowedSources: ""

    # ENV['IMGPROXY_IGNORE_SSL_VERIFICATION']
    # when true, disables SSL verification, so imgproxy can be used in a development environment with self-signed SSL certificates.
    ignoreSslVerification: false

    # ENV['IMGPROXY_DEVELOPMENT_ERRORS_MODE']
    # when true, imgproxy will respond with detailed error messages.
    # Not recommended for production because some errors may contain stack trace.
    developmentErrorsMode: ""

  # https://docs.imgproxy.net/#/configuration?id=compression
  compression:

    # ENV['IMGPROXY_QUALITY']
    # default quality of the resulting image, percentage.
    quality: 80

    # ENV['IMGPROXY_FORMAT_QUALITY']
    # default quality of the resulting image per format, comma divided.
    # Example: `jpeg=70,avif=40,webp=60`. When value for the resulting format is not set, `IMGPROXY_QUALITY` value is used.
    formatQuality: ""

    # ENV['IMGPROXY_GZIP_COMPRESSION']
    # GZip compression level.
    gzipCompression: 5

    # ENV['IMGPROXY_JPEG_PROGRESSIVE']
    # when true, enables progressive JPEG compression.
    jpegProgressive: false

    # ENV['IMGPROXY_JPEG_NO_SUBSAMPLE']
    # PRO: when true, chrominance subsampling is disabled. This will improve quality at the cost of larger file size.
    jpegNoSubsample: false

    # ENV['IMGPROXY_JPEG_TRELLIS_QUANT']
    # PRO: when true, enables trellis quantisation for each 8x8 block. Reduces file size but increases compression time.
    jpegTrellisQuant: false

    # ENV['IMGPROXY_JPEG_OVERSHOOT_DERINGING']
    # PRO: when true, enables overshooting of samples with extreme values.
    # Overshooting may reduce ringing artifacts from compression, in particular in areas where black text appears on a white background.
    jpegOvershootDeringing: false

    # ENV['IMGPROXY_JPEG_OPTIMIZE_SCANS']
    # PRO: when true, split the spectrum of DCT coefficients into separate scans.
    # Reduces file size but increases compression time. Requires `IMGPROXY_JPEG_PROGRESSIVE` to be true.
    jpegOptimizeScans: false

    # ENV['IMGPROXY_JPEG_QUANT_TABLE']
    # PRO: quantization table to use. Supported values are 0-8 (see documentation for details)
    # 0: Table from JPEG Annex K (default);
    # 1: Flat table;
    # 2: Table tuned for MSSIM on Kodak image set;
    # 3: Table from ImageMagick by N. Robidoux;
    # 4: Table tuned for PSNR-HVS-M on Kodak image set;
    # 5: Table from Relevance of Human Vision to JPEG-DCT Compression (1992);
    # 6: Table from DCTune Perceptual Optimization of Compressed Dental X-Rays (1997);
    # 7: Table from A Visual Detection Model for DCT Coefficient Quantization (1993);
    # 8: Table from An Improved Detection Model for DCT Coefficient Quantization (1993).
    jpegQuantTable: 0

    # ENV['IMGPROXY_PNG_INTERLACED']
    # when true, enables interlaced PNG compression.
    pngInterlaced: false

    # ENV['IMGPROXY_PNG_QUANTIZE']
    # when true, enables PNG quantization.
    pngQuantize: false

    # ENV['IMGPROXY_PNG_QUANTIZATION_COLORS']
    # maximum number of quantization palette entries. Should be between 2 and 256.
    pngQuantizationColors: 256

    # ENV['IMGPROXY_GIF_OPTIMIZE_FRAMES']
    # PRO: when true, enables GIF frames optimization. This may produce a smaller result, but may increase compression time.
    gifOptimizeFrames: false

    # ENV['IMGPROXY_GIF_OPTIMIZE_TRANSPARENCY']
    # PRO: when true, enables GIF transparency optimization. This may produce a smaller result, but may increase compression time.
    gifOptimizeTransparency: false

    # ENV['IMGPROXY_AVIF_SPEED']
    # controls the CPU effort spent improving compression. 0 slowest - 8 fastest.
    avifSpeed: 5

  # https://docs.imgproxy.net/#/configuration?id=avifwebp-support-detection
  formatsSupportDetection:

    # Enforce/enable webP detection/usage
    webp:

      # ENV['IMGPROXY_ENABLE_WEBP_DETECTION']
      # enables WebP support detection.
      # When the file extension is omitted in the imgproxy URL and browser supports WebP, imgproxy will use it as the resulting format
      enabled: false

      # ENV['IMGPROXY_ENFORCE_WEBP']
      # enables WebP support detection and enforces WebP usage. If the browser supports WebP, it will be used as resulting format even if another extension is specified in the imgproxy URL.
      enforced: false

    # Enforce/enable AVIF detection/usage
    avif:

      # ENV['IMGPROXY_ENABLE_AVIF_DETECTION']
      # enables AVIF support detection. When the file extension is omitted in the imgproxy URL and browser supports AVIF, imgproxy will use it as the resulting format
      enabled: false

      # ENV['IMGPROXY_ENFORCE_AVIF']
      # enables AVIF support detection and enforces AVIF usage. If the browser supports AVIF, it will be used as resulting format even if another extension is specified in the imgproxy URL.
      enforced: false

  # https://docs.imgproxy.net/#/configuration?id=client-hints-support
  clientHintsSupport:

    # ENV['IMGPROXY_ENABLE_CLIENT_HINTS']
    # enables Client Hints support to determine default width and DPR options.
    enabled: false

  # https://docs.imgproxy.net/#/configuration?id=video-thumbnails
  videoThumbnails:

    # ENV['IMGPROXY_ENABLE_VIDEO_THUMBNAILS']
    # PRO: then true, enables video thumbnails generation.
    enabled: false

    # ENV['IMGPROXY_VIDEO_THUMBNAIL_SECOND']
    # PRO: the timestamp of the frame in seconds that will be used for a thumbnail.
    second: 1

    # ENV['IMGPROXY_VIDEO_THUMBNAIL_PROBE_SIZE']
    # PRO: the maximum amount of bytes used to determine the format. Lower values can decrease memory usage but can produce inaccurate data or even lead to errors.
    probeSize: 5000000

    # ENV['IMGPROXY_VIDEO_THUMBNAIL_MAX_ANALYZE_DURATION']
    # PRO: the maximum of milliseconds used to get the stream info. Low values can decrease memory usage but can produce inaccurate data or even lead to errors. When set to 0, the heuristic is used.
    maxAnalyzeDuration: 0

  # https://docs.imgproxy.net/#/configuration?id=watermark
  watermark:

    # ENV['IMGPROXY_WATERMARK_DATA']
    # Base64-encoded image data. You can easily calculate it with `base64 tmp/watermark.png | tr -d '\n'`
    data: ""

    # ENV['IMGPROXY_WATERMARK_PATH']
    # path to the locally stored image
    path: ""

    # ENV['IMGPROXY_WATERMARK_URL']
    # watermark image URL
    url: ""

    # ENV['IMGPROXY_WATERMARK_OPACITY']
    # watermark base opacity
    opacity: 1

    # ENV['IMGPROXY_WATERMARKS_CACHE_SIZE']
    # PRO: size of custom watermarks cache. When set to `0`, watermarks cache is disabled.
    cacheSize: 256

  # https://docs.imgproxy.net/#/configuration?id=unsharpening
  unsharpening:

    # ENV['IMGPROXY_UNSHARPENING_MODE']
    # PRO: controls when unsharpenning mask should be applied.
    # The following modes are supported: `auto`, `none`, `always'
    mode: auto

    # ENV['IMGPROXY_UNSHARPENING_WEIGHT']
    # PRO: a floating-point number that defines how neighbor pixels will affect the current pixel.
    # The greater the value the sharper the image. Should be greater than zero.
    weight: 1

    # ENV['IMGPROXY_UNSHARPENING_DIVIDOR']
    # PRO: a floating-point number that defines the unsharpening strength.
    # The lesser the value the sharper the image. Should be greater than zero.
    dividor: 24

  # https://docs.imgproxy.net/#/configuration?id=fallback-image
  fallbackImage:

    # ENV['IMGPROXY_FALLBACK_IMAGE_DATA']
    # Base64-encoded image data. You can easily calculate it with `base64 tmp/fallback.png | tr -d '\n'`
    data: ""

    # ENV['IMGPROXY_FALLBACK_IMAGE_URL']
    # fallback image URL.
    url: ""

  # https://docs.imgproxy.net/#/configuration?id=skip-processing
  skipProcessing:

    # ENV['IMGPROXY_SKIP_PROCESSING_FORMATS']
    # list of formats that imgproxy shouldn't process, comma-divided.
    formats: ""

  # https://docs.imgproxy.net/#/configuration?id=presets
  presets:

    # ENV['IMGPROXY_PRESETS']
    # set of preset definitions, comma-divided.
    # Example: `default=resizing_type:fill/enlarge:1,sharp=sharpen:0.7,blurry=blur:2`.
    definitions: ""

    # ENV['IMGPROXY_ONLY_PRESETS']
    # disable all URL formats and enable presets-only mode.
    onlyPresets: false

  # https://docs.imgproxy.net/#/configuration?id=serving-files-from-amazon-s3
  aws:

    # ENV['IMGPROXY_USE_S3']
    # when `true`, enables image fetching from Amazon S3 buckets.
    enabled: false

    # AWS account id (required for authentication using IAM Role)
    accountId: ""

    # ENV['AWS_ACCESS_KEY_ID']
    # AWS key
    accessKeyId: ""

    # ENV['AWS_SECRET_ACCESS_KEY']
    # AWS secret
    secretAccessKey: ""

    # If enabled then the IAM Role is used for the authentication
    iamRoleName: ""

    # ENV['IMGPROXY_S3_REGION']
    # AWS region
    s3Region: ""

    # ENV['IMGPROXY_S3_ENDPOINT']
    # custom S3 endpoint to being used by imgproxy.
    s3Endpoint: ""

  # https://docs.imgproxy.net/#/configuration?id=serving-files-from-google-cloud-storage
  gcs:

    # Enable GCS as backend for images
    enabled: false

    # ENV['IMGPROXY_GCS_KEY']
    # Google Cloud JSON key.
    jsonKey: ""

  # https://docs.imgproxy.net/#/configuration?id=serving-files-from-azure-blob-storage
  abs:

    # ENV['IMGPROXY_USE_ABS']
    # when `true`, enables image fetching from Azure Blob Storage (ABS) containers.
    enabled: false

    # ENV['IMGPROXY_ABS_NAME']
    # Azure account name.
    accountName: ""

    # ENV['IMGPROXY_ABS_KEY']
    # Azure account key.
    accountKey: ""

    # ENV['IMGPROXY_ABS_ENDPOINT']
    # custom Azure Blob Storage endpoint to be used by imgproxy.
    endpoint: ""

  # https://docs.imgproxy.net/#/configuration?id=new-relic-metrics
  newRelic:

    enabled: false

    # ENV['IMGPROXY_NEW_RELIC_KEY']
    # New Relic license key
    licenseKey: ""

    # ENV['IMGPROXY_NEW_RELIC_APP_NAME']
    # New Relic application name. Default: `imgproxy`.
    appName: ""

  # https://docs.imgproxy.net/#/configuration?id=prometheus-metrics
  prometheus:

    enabled: false

    # ENV['IMGPROXY_PROMETHEUS_NAMESPACE']
    # Namespace (prefix) for imgproxy metrics.
    namespace: ""

    # ENV['IMGPROXY_PROMETHEUS_BIND']
    # This value is set to ':8081' (not editable)

  # https://docs.imgproxy.net/#/configuration?id=error-reporting
  errorReporting:

    # Integration to Bugsnag
    bugsnag:

      # When provided, enables error reporting to Bugsnag
      enabled: false

      # ENV['IMGPROXY_BUGSNAG_KEY']
      # Bugsnag API key
      key: ""

      # ENV['IMGPROXY_BUGSNAG_STAGE']
      # Bugsnag stage to report to.
      env: "production"

    # Integration to Honeybadger
    honeybadger:

      # When provided, enables error reporting to Honeybadger
      enabled: false

      # ENV['IMGPROXY_HONEYBADGER_KEY']
      # Honeybadger API key.
      key: ""

      # ENV['IMGPROXY_HONEYBADGER_ENV']
      # Honeybadger env to report to.
      env: "production"

    # Integration to Sentry
    sentry:

      #  When provided, enables error reporting to Sentry
      enabled: false

      # ENV['IMGPROXY_SENTRY_DSN']
      # Sentry project DSN.
      dsn: ""

      # ENV['IMGPROXY_SENTRY_ENVIRONMENT']
      # Sentry environment to report to. Default: `production`
      env: "production"

      # ENV['IMGPROXY_SENTRY_RELEASE']
      # Sentry release to report to. Default: `imgproxy/{imgproxy version}`
      release: ""

    # ENV['IMGPROXY_REPORT_DOWNLOADING_ERRORS']
    # when `true`, imgproxy will report downloading errors.
    reportDownloadingErrors: true

  # https://docs.imgproxy.net/#/configuration?id=log
  logging:

    # ENV['IMGPROXY_LOG_FORMAT']
    # the log format. The following formats are supported: pretty, structured, json
    # - pretty: (default) colored human-readable format;
    # - structured: machine-readable format;
    # - json: JSON format;
    format: "pretty"

    # ENV['IMGPROXY_LOG_LEVEL']
    # the log level. The following levels are supported `error`, `warn`, `info` and `debug`.
    level: "info"

    # Enable Syslog integration
    # 
    syslog:

      # ENV['IMGPROXY_SYSLOG_ENABLE']
      # when `true`, enables sending logs to syslog
      enabled: false

      # ENV['IMGPROXY_SYSLOG_LEVEL']
      # maximum log level to send to syslog. Known levels are: `crit`, `error`, `warning` and `info`.
      level: "info"

      # ENV['IMGPROXY_SYSLOG_NETWORK']
      # network that will be used to connect to syslog. When blank, the local syslog server will be used. Known networks are `tcp`, `tcp4`, `tcp6`, `udp`, `udp4`, `udp6`, `ip`, `ip4`, `ip6`, `unix`, `unixgram` and `unixpacket`.
      network: "tcp"

      # ENV['IMGPROXY_SYSLOG_ADDRESS']
      # address of the syslog service. Not used if `IMGPROXY_SYSLOG_NETWORK` is blank.
      address: ""

      # ENV['IMGPROXY_SYSLOG_TAG']
      # specific syslog tag.
      tag: "imgproxy"

  # https://docs.imgproxy.net/#/configuration?id=memory-usage-tweaks
  memoryUsageTweaks:

    # ENV['IMGPROXY_DOWNLOAD_BUFFER_SIZE']
    # the initial size (in bytes) of a single download buffer. When zero, initializes empty download buffers.
    downloadBufferSize: 0

    # ENV['IMGPROXY_GZIP_BUFFER_SIZE']
    # the initial size (in bytes) of a single GZip buffer. When zero, initializes empty GZip buffers. Makes sense only when GZip compression is enabled.
    gzipBufferSize: 0

    # ENV['IMGPROXY_FREE_MEMORY_INTERVAL']
    # the interval (in seconds) at which unused memory will be returned to the OS.
    freeMemoryInterval: 10

    # ENV['IMGPROXY_BUFFER_POOL_CALIBRATION_THRESHOLD']
    # the number of buffers that should be returned to a pool before calibration.
    bufferPoolCalibrationThreshold: 1024

  # https://docs.imgproxy.net/#/configuration?id=miscellaneous
  miscellaneous:

    # ENV['IMGPROXY_BASE_URL']
    # base URL prefix that will be added to every requested image URL. For example, if the base URL is `http://example.com/images` and `/path/to/image.png` is requested, imgproxy will download the source image from `http://example.com/images/path/to/image.png`.
    baseUrl: ""

    # ENV['IMGPROXY_USE_LINEAR_COLORSPACE']
    # when `true`, imgproxy will process images in linear colorspace. This will slow down processing. Note that images won't be fully processed in linear colorspace while shrink-on-load is enabled (see below).
    useLinearColorspace: false

    # ENV['IMGPROXY_DISABLE_SHRINK_ON_LOAD']
    # when `true`, disables shrink-on-load for JPEG and WebP. Allows to process the whole image in linear colorspace but dramatically slows down resizing and increases memory usage when working with large images.
    disableShrinkOnLoad: false

    # ENV['IMGPROXY_STRIP_METADATA']
    # when `true`, imgproxy will strip all metadata (EXIF, IPTC, etc.) from JPEG and WebP output images.
    stripMetadata: true

    # ENV['IMGPROXY_STRIP_COLOR_PROFILE']
    # when `true`, imgproxy will transform the embedded color profile (ICC) to sRGB and remove it from the image. Otherwise, imgproxy will try to keep it as is.
    stripColorProfile: true

    # ENV['IMGPROXY_AUTO_ROTATE']
    # when `true`, imgproxy will auto rotate images based on the EXIF Orientation parameter (if available in the image meta data). The orientation tag will be removed from the image anyway.
    autoRotate: true

  # In this section you can add custom env variables
  # to support newest features of imgproxy in the older versions of imgproxy-helm
  #
  # Example:
  # custom:
  #   IMGPROXY_FOO: bar
  custom: {}
