---
# How many instances of imgproxy you desire to spin up.
replicaCount: 1

# A node selector label.
nodeSelector: {}

# Node and inter-pod affinity configuration
affinity: {}

# Toleration for K8s taints
tolerations: {}

# Docker image repository, tag and a policy for Kubernetes to pull it.
image:
  repo: darthsim/imgproxy
  tag: v2.15.0
  pullPolicy: IfNotPresent

imagePullSecrets: {}
  # registry: ""
  # username: ""
  # password: ""

# Kubernetes API version to use for imgproxy Deployment
apiVersion: apps/v1

# Set kubernetes specific resource limits
resources: {}
  # limits:
  #   cpu: 700m
  #   memory: 700Mi
  # requests:
  #   cpu: 700m
  #   memory: 700Mi

# Kubernetes service type
serviceType: "ClusterIP"

# Timeuouts and counters options for Liveness & Readiness probes for imgproxy
# Kubernets Deployment
readinessProbe:
  initialDelaySeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5
livenessProbe:
  initialDelaySeconds: 50
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5

# Configuration parameters for Ingress resource
ingress:
  acme: false
  annotations: {}
  enabled: false
  health:
    # Comma separated string of CIDR addresses that are allowed
    # to access `/health` url of imgproxy.
    whitelist: ""
  host: "example.com"
  tls:
    enabled: false
    crt: ""
    key: ""
    secretName: ""
  #   nginx.ingress.kubernetes.io/proxy-body-size: "32m"

enablePrometheus: false
prometheusNamespace: ""
serviceMonitor:
  enabled: false
  honorLabels: true
  interval: 0
  namespace: ""
  selector:
    release: prometheus-operator
  targetLabels:
    - app
    - release

podDisruptionBudget:
  enabled: true
  minAvailable: 0
  maxUnavailable: 0

# Pod annotations
annotations: {}

# Deployment annotations
deployment:
  annotations: {}

# Hex-encoded key for URL encoding. CHANGE IT!!!!
key: 1b147116e57d9e06df3696b21260169902fe201ccdb9715267999176ccbfaae6f2c2b75b78110d0287643d98cde143e7a3f98a46ec825a1ab7ea10af426c2436

# Hex-encoded salt for URL encoding. CHANGE IT!!!!
salt: 1e4483006c56f05f1b42af2f2b61765f64b8a074bf993922dd5b4bca78f49280683beb368308b7f76d522027b071a25e6d4b26138686b43e1faa4be4c9b674ea

# number of bytes to use for signature before encoding to Base64.
signatureSize: 32

# The maximum duration (in seconds) for reading the entire image request, including the body
readTimeout: 10

# The maximum duration (in seconds) for writing the response
writeTimeout: 10

# the maximum duration (in seconds) to wait for the next request before closing the connection. When set to 0, keep-alive is disabled.
keepAliveTimeout: 10

# The maximum duration (in seconds) for downloading the source image
downloadTimeout: 5

# The maximum number of image requests to be processed simultaneously. Default: double number of CPU cores
concurrency: ""

# The maximum number of simultaneous active connections. Default: concurrency * 10
maxClients: ""

# Duration in seconds sent in Expires and Cache-Control: max-age headers.
ttl: 3600

#when true and source image response contains Expires or Cache-Control headers, reuse those headers
cacheControlPassthrough: false

# when true, enables SO_REUSEPORT socket option (currently on linux and darwin only);
soReuseport: false

# URL path prefix. Example: when set to /abc/def, imgproxy URL will be /abc/def/%signature/%processing_options/%source_url
pathPrefix: ""

# User-Agent header that will be sent with source image request. Default: imgproxy/%current_version
userAgent: ""

# When true, enables using ETag header for the cache control
useEtag: false

# PRO: list of custom headers that imgproxy will send while requesting the source image, divided by \; (can be redefined by IMGPROXY_CUSTOM_HEADERS_SEPARATOR)
customRequestHeaders: ""

# PRO: list of custom response headers, divided by \; (can be redefined by IMGPROXY_CUSTOM_HEADERS_SEPARATOR)
customResponseHeaders: ""

# PRO: string that will be used as a custom headers separator; default '\;'
customHeadersSeparator: ""

# Root of the local filesystem. See [Serving local files](https://github.com/darthsim/imgproxy#serving-local-files). Keep empty to disable serving of local files.
localFileSystemRoot: false

# The maximum resolution of the source image, in megapixels. Images with larger real size will be rejected
maxSrcResolution: "16.8"

# the maximum size of the source image, in bytes. Images with larger file size will be rejected. When 0, file size check is disabled.
maxSrcFileSize: 0

# the maximum of animated image frames to being processed.
maxAnimationFrames: 1

# The authorization token. If specified, request should contain the `Authorization: Bearer %secret%` header
secret: ""

# When set, enables CORS headers with provided origin. CORS headers are disabled by default.
allowOrigin: ""

# whitelist of source image URLs prefixes divided by comma. When blank, imgproxy allows all source image URLs. Example: s3://,https://example.com/,local://.
allowedSources: ""

# When true, disables SSL verification
ignoreSslVerification: false

# when true, imgproxy will respond with detailed error messages. Not recommended for production because some errors may contain stack trace.
developmentErrorsMode: false

# Quality of the resulting image, percentage
quality: 80

# GZip compression level
gzipCompression: 5

# When true, enables progressive compression of JPEG
jpegProgressive: false

# PRO: when true, chrominance subsampling is disabled. This will improve quality at the cost of larger file size.
jpegNoSubsample: false

# PRO: when true, enables trellis quantisation for each 8x8 block. Reduces file size but increases compression time.
jpegTrellisQuant: false

# PRO: when true, enables overshooting of samples with extreme values. Overshooting may reduce ringing artifacts from compression, in particular in areas where black text appears on a white background.
jpegOvershootDeringing: false

# PRO: when true, split the spectrum of DCT coefficients into separate scans. Reduces file size but increases compression time. Requires IMGPROXY_JPEG_PROGRESSIVE to be true.
jpegOptimizeScans: false

# PRO: quantization table to use. Supported values are:
# 0: Table from JPEG Annex K (default);
# 1: Flat table;
# 2: Table tuned for MSSIM on Kodak image set;
# 3: Table from ImageMagick by N. Robidoux;
# 4: Table tuned for PSNR-HVS-M on Kodak image set;
# 5: Table from Relevance of Human Vision to JPEG-DCT Compression (1992);
# 6: Table from DCTune Perceptual Optimization of Compressed Dental X-Rays (1997);
# 7: Table from A Visual Detection Model for DCT Coefficient Quantization (1993);
# 8: Table from An Improved Detection Model for DCT Coefficient Quantization (1993).
jpegQuantTable: 0

# When true, enables interlaced compression of PNG
pngInterlaced: false

# when true, enables PNG quantization. libvips should be built with libimagequant support.
pngQuantize: false

# maximum number of quantization palette entries. Should be between 2 and 256.
pngQuantizationColors: 256

# PRO: when true, enables GIF frames optimization. This may produce a smaller result, but may increase compression time
gifOptimizeFrames: false

# PRO: when true, enables GIF transparency optimization. This may produce a smaller result, but may increase compression time
gifOptimizeTransparency: false

# Enables WebP support detection. When the file extension is omitted in the imgproxy URL and browser supports WebP, imgproxy will use it as the resulting format
enableWebpDetection: false

# Enables WebP support detection and enforces WebP usage. If the browser supports WebP, it will be used as resulting format even if another extension is specified in the imgproxy URL
enforceWebp: false

# Enables Client Hints support when the width is ommited for automatic responsive images
enableClientHints: false

# PRO: when true, enables video thumbnails generation
enableVideoThumbnails: false

# PRO: the maximum amount of bytes used to determine the format. Lower values can decrease memory usage but can produce inaccurate data or even lead to errors
videoThumbnailProbeSize: 5000000

# PRO: the maximum of milliseconds used to get the stream info. Low values can decrease memory usage but can produce inaccurate data or even lead to errors. When set to 0, the heuristic is used.
videoThumbnailMaxAnalyzeDuration: 0

# PRO: the timestamp of the frame in seconds that will be used for a thumbnail
videoThumbnailSecond: 1

# Base64-encoded image data
watermarkData: ""

# Path to the locally stored image
watermarkPath: ""

# Watermark image URL
watermarkUrl: ""

# Watermark base opacity
watermarkOpacity: 1

#PRO: size of custom watermarks cache. When set to 0, watermarks cache is disabled. By default 256 watermarks are cached.
watermarkCacheSize: 256

# Base64-encoded image data. You can easily calculate it with `base64 tmp/fallback.png | tr -d '\n'`
fallbackImageData: ""

# path to the locally stored image
fallbackImagePath: ""

# fallback image URL
fallbackImageUrl: ""

# Set of preset definitions, comma-divided
presets: ""

# disable all URL formats and enable presets-only mode.
onlyPresets: false

# When true, enables image fetching from Amazon S3 buckets
useS3: false

# AWS key
awsKey: ""

# AWS secret
awsSecret: ""

# AWS region
awsRegion: ""

# Custom S3 endpoint to being used by imgproxy
s3Endpoint: ""

# Enable GCS as backend for images
useGcs: false

# Google Cloud JSON key. When set, enables image fetching from Google Cloud Storage buckets
gcsKey: ""

# New Relic license key
newRelicKey: ""

# New Relic application name. Default: imgproxy
newRelicAppName: ""

# Bugsnag API key. When provided, enables errors reporting to Bugsnag
bugsnagKey: ""

# Bugsnag stage to report to.
bugsnagStage: "production"

# Honeybadger API key. When provided, enables errors reporting to Honeybadger
honeybadgerKey: ""

# Honeybadger env to report to.
honeybadgerEnv: "production"

# Sentry project DSN. When provided, enables error reporting to Sentry
sentryDsn: ""

# Sentry environment to report to.
sentryEnvironment: "production"

# Sentry release to report to.  Default: imgproxy/{imgproxy version};
sentryRelease: ""

# when true, imgproxy will report downloading errors
reportDownloadingErrors: true

# the log format. The following formats are supported:
# - pretty: (default) colored human-readable format;
# - structured: machine-readable format;
# - json: JSON format;
logFormat: "pretty"

# the log level. The following levels are supported error, warn, info and debug.
logLevel: "info"

# when true, enables sending logs to syslog
syslogEnable: false

# maximum log level to send to syslog. Known levels are: crit, error, warning and info
syslogLevel: "info"

# network that will be used to connect to syslog. When blank, the local syslog server will be used. Known networks are tcp, tcp4, tcp6, udp, udp4, udp6, ip, ip4, ip6, unix, unixgram and unixpacket
syslogNetwork: ""

# address of the syslog service. Not used if IMGPROXY_SYSLOG_NETWORK is blank
syslogAddress: ""

# specific syslog tag
syslogTag: "imgproxy"

# the initial size (in bytes) of a single download buffer. When zero, initializes empty download buffers
downloadBufferSize: 0

# the initial size (in bytes) of a single GZip buffer. When zero, initializes empty GZip buffers. Makes sense only when GZip compression is enabled
gzipBufferSize: 0

# the interval (in seconds) at which unused memory will be returned to the OS
freeMemoryInterval: 10

# the number of buffers that should be returned to a pool before calibration
bufferPoolCalibrationThreshold: 1024

# Base URL part which will be added to every requestsd image URL. For example, if base URL is `http://example.com/images` and `/path/to/image.png` is requested, imgproxy will download the image from `http://example.com/images/path/to/image.png`
baseUrl: ""

# when true, imgproxy will process images in linear colorspace. This will slow down processing. Note that images won’t be fully processed in linear colorspace while shrink-on-load is enabled (see below)
useLinearColorspace: false

# when true, disables shrink-on-load for JPEG and WebP. Allows to process the whole image in linear colorspace but dramatically slows down resizing and increases memory usage when working with large images
disableShrinkOnLoad: false

# PRO: when true, imgproxy will apply unsharpen masking to the resulting image if one is smaller than the source
applyUnsharpenMasking: true

# whether to strip all metadata (EXIF, IPTC, etc.) from JPEG and WebP output images
stripMetadata: true
