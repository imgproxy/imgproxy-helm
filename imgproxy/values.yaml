---
# Docker image repository, tag, policy and secrets for Kubernetes to pull it.
image:
  repo: darthsim/imgproxy
  tag: v3.20.0
  pullPolicy: IfNotPresent
  # create new image-pull-secret if enabled: true
  pullSecrets:
    enabled: false
    registry: ""
    username: ""
    password: ""
  # list of existing image-pull-secrets
  addPullSecrets: []

# License key for Imgproxy Pro.
licenseKey: ""

# Configure K8s resources
resources:

  # Settings applied to every single resource of the chart.
  common:
    labels: {}

  deployment:
    # https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/#pod-priority
    priority:

      # The name of the priority class to be used in both pod.PriorityClassName
      # and the PriorityClass (when a level is above 0).
      # When a level is not set, or set to 0 (default), then the definition
      # of the corresponding PriorityClass is up to the user.
      # You can use system names like `set-cluster-critical` and `set-node-critical` as well,
      # in this case the class won't be created and level is ignored.
      name: ""

      # If the level is above 0, then a correspoding PriorityClass will be created
      # and assigned to the pod by the `PriorityClassName`
      level: 0

      # This setting is supported in K8s v1.19+, otherwise it will be ignored
      # https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/#non-preempting-priority-class
      preempting: true

    annotations: {}

    # How many instances of imgproxy you desire to spin up (default to 1).
    # This setting is used for backward compatibility to v0.7.9 in the absence of .replicas
    # DEPRECATED (in v0.8.0, will be dropped in v0.9.0) in favor of .replicas.default
    replicaCount: 1

    # How many instances of imgproxy you desire to spin up.
    # If `maxCount > minCount` then autoscaling is configured using
    # the `stabilizationInterval` and `cpuUtilizationAverage` settings.
    # https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/horizontal-pod-autoscaler-v2beta2/#HorizontalPodAutoscalerSpec:
    #
    # This part can be skipped, in that case 1 replica will be used.
    replicas:

      # The default number of replicas to start from (default 1)
      default: 1

      # The minimum number of replicas (default to `default`).
      minCount: 1

      # The maximum number of replicas (default to `minCount`).
      # Values less then `minCount` are ignored!
      maxCount: 1

      # The number of pods to be added or removed (1 by default).
      #
      # The setting is used if `minCount < maxCount` only.
      stepCount: 1

      # The period (1 - 1800 seconds) during which the step is applied
      # (60 seconds by default).
      #
      # For example, default settings (step: 1, period: 60) means
      # that the scaling rate is no more than 1 pod a minute.
      #
      # The setting is used if `minCount < maxCount` only.
      stepSeconds: 60

      # The number of seconds for which past recommendations
      # should be considered while scaling up or scaling down (0 - 3600).
      # The period will be the same for both up- and downscaling.
      #
      # The setting is used if `minCount < maxCount` only (default 300 seconds).
      stabilizationInterval: 300

      # The average % of CPU utilization by imgproxy pod.
      # The value is relative to the requested CPU utilization
      # (resources.deployment.resources.requests.cpu).
      #
      # The setting MUST be set if `minCount < maxCount` only.
      cpuUtilization: 80

    # See https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate

    # A node selector label.
    nodeSelector: {}

    # Node and inter-pod affinity configuration
    affinity: {}

    # Toleration for K8s taints
    tolerations: []

    # topologySpreadConstraints https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/
    topologySpreadConstraints: []
    # - maxSkew: 1
    #   topologyKey: topology.kubernetes.io/zone
    #   whenUnsatisfiable: DoNotSchedule

    # Set kubernetes specific resource limits.
    # We claim `cpu: 1` for both limits and requests by default.
    # To skip these defaults, set `cpu: ~` explicitly.
    resources: {}
    # limits:
    #   cpu: 700m
    #   memory: 700Mi
    # requests:
    #   cpu: 700m
    #   memory: 700Mi

    # Timeuouts and counters options for Readiness probe
    readinessProbe:
      initialDelaySeconds: 10
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5

    # Timeuouts and counters options for Liveness probe
    livenessProbe:
      initialDelaySeconds: 50
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5

    # Lifecycle configuration
    # Example:
    #   postStart:
    #     exec:
    #       command: ["echo", "Hello from imgproxy"]
    # Example:
    #   preStop:
    #     exec:
    #       command: ["/bin/sleep", "30"]
    lifecycle: {}

    # The minimum number of seconds for which a newly created pod should be ready
    # without any of its containers crashing, for it to be considered available.
    # It is set to 0 by default.
    minReadySeconds: ~

    # A security context defines privilege and access control settings for the deployment.
    # Check available settings in the documentation by link:
    # https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    securityContext: {}
      # allowPrivilegeEscalation: false
      # runAsNonRoot: true

    # A custom amount of time (in seconds) to terminate the app after pre-stop hook is called,
    # or a TERM signal is received.
    # It is set to `30` seconds by default.
    terminationGracePeriodSeconds: ~

  # List names of the custom secrets with env variables to be added
  # from the external resources (like Vault, AWS etc.)
  #
  # You're up to generating those secrets in any way, either manually
  # or via some CRD like https://github.com/external-secrets/kubernetes-external-secrets
  # We won't make any suggestions about the content of the secrets,
  # it will be added to the imgproxy pods as a plain lists of environment variables.
  # These variables would overload those passed through the secret provided by the chart.
  #
  # Example:
  #   externalSecrets:
  #     - my_manual_secret
  addSecrets: []

  service:
    annotations: {}
    type: ClusterIP
    loadBalancerIP: ""
    externalTrafficPolicy: Cluster
    loadBalancerSourceRanges:
    nodePort:
    bind: 80
    # - 192.168.1.1/24
    # - 10.0.0.1/20


  serviceAccount:
    # The name of the EXISTING service account to be used.
    # If the custom name is set we WON'T create the service account
    # but presume that it already exists.
    existingName: ~
    # Add custom annotations to the Service Account
    # in addition to those we already provided for AWS IAM role
    # (see features.aws.iamRoleName and features.aws.accountId).
    # This setting is not used if the `existingName` is set because
    # we won't generate the service account in that case.
    annotations: {}

  ingress:
    enabled: false
    # Add this suffix to ingress host paths. For example, use '*' for AWS load balancer
    # This is a shortcut for the issue: https://github.com/kubernetes-sigs/aws-load-balancer-controller/issues/667
    pathSuffix:
    # the custom name for the ingress resource
    className:
    health:
      whitelist: # 127.0.0.1/32
    annotations: {}
    #   kubernetes.io/ingress.class: nginx
    #   kubernetes.io/tls-acme: "true"
    hosts: []
    #   - example.com
    #   - www.example.com
    tls: []
    #   - secretName: example-com-tls
    #     hosts:
    #       - example.com
    #       - www.example.com

    # Enable customization of pathType.
    #
    # This customization can be necessary because the default
    # `ImplementationSpecific` path type with AWS ELB Controllers
    # works as `Exact` type rather than `Prefix`.
    #
    # @see https://github.com/imgproxy/imgproxy-helm/issues/59
    pathType: ImplementationSpecific

  serviceMonitor:
    enabled: true
    honorLabels: true
    interval: 0
    namespace: ""
    selector:
      release: prometheus-operator
    targetLabels:
      - app
      - release

  podDisruptionBudget:
    enabled: true
    minAvailable: 0
    maxUnavailable: 1

  pod:
    annotations: {}
    labels: {}

# Configure persistence
persistence:
  # If persistence is enabled
  enabled: false

  # PVC name
  name: "imgproxy-data"

  # If existing claim should be used
  existingClaim: ""

  # Volume mount path in imgproxy deployment
  mountPath: "/images"

  # Persistent volume sub path
  subPath: ""

  # Access modes for PV
  accessModes:
    - ReadWriteOnce

  # Storage size
  size: 10Gi

  # Storage Class for PVC
  storageClass: ""

  # Create new PV from data source
  dataSource: ""

# Configure imgproxy features
# https://docs.imgproxy.net/configuration
features:

  # https://docs.imgproxy.net/configuration?id=url-signature
  urlSignature:

    # If URL signature is enabled
    enabled: true

    # ENV['IMGPROXY_KEY']
    # Hex-encoded key for URL encoding. CHANGE IT!!!!
    key: 1b147116e57d9e06df3696b21260169902fe201ccdb9715267999176ccbfaae6f2c2b75b78110d0287643d98cde143e7a3f98a46ec825a1ab7ea10af426c2436

    # ENV['IMGPROXY_SALT']
    # Hex-encoded salt for URL encoding. CHANGE IT!!!!
    salt: 1e4483006c56f05f1b42af2f2b61765f64b8a074bf993922dd5b4bca78f49280683beb368308b7f76d522027b071a25e6d4b26138686b43e1faa4be4c9b674ea

    # ENV['IMGPROXY_SIGNATURE_SIZE']
    # number of bytes to use for signature before encoding to Base64.
    signatureSize: "32"

  # https://docs.imgproxy.net/configuration?id=server
  server:

    # ENV['IMGPROXY_READ_TIMEOUT']
    # The maximum duration (in seconds) for reading the entire image request, including the body
    readTimeout: "10"

    # ENV['IMGPROXY_WRITE_TIMEOUT']
    # The maximum duration (in seconds) for writing the response
    writeTimeout: "10"

    # ENV['IMGPROXY_KEEP_ALIVE_TIMEOUT']
    # the maximum duration (in seconds) to wait for the next request before closing the connection.
    # When set to 0, keep-alive is disabled.
    keepAliveTimeout: "10"

    # ENV['IMGPROXY_CLIENT_KEEP_ALIVE_TIMEOUT']
    # The maximum duration (in seconds) to wait for the next request
    # before closing the HTTP client connection.
    # The HTTP client is used to download source images.
    # When set to 0, keep-alive is disabled. Default: 90
    clientKeepAliveTimeout: "90"

    # ENV['IMGPROXY_DOWNLOAD_TIMEOUT']
    # The maximum duration (in seconds) for downloading the source image
    downloadTimeout: "5"

    # ENV['IMGPROXY_CONCURRENCY']
    # The maximum number of image requests to be processed simultaneously.
    # Default: double number of CPU cores
    concurrency: ""

    # ENV['IMGPROXY_REQUESTS_QUEUE_SIZE']
    # The maximum number of image requests that can be put in the queue.
    # Requests that exceed this limit are rejected with `429` HTTP status.
    # When set to `0`, the requests queue is unlimited.
    requestsQueueSize: 0

    # ENV['IMGPROXY_MAX_CLIENTS']
    # The maximum number of simultaneous active connections.
    # Default: concurrency * 10
    maxClients: ""

    # ENV['IMGPROXY_TTL']
    # Duration in seconds sent in Expires and Cache-Control: max-age headers.
    ttl: ~

    # ENV['IMGPROXY_CACHE_CONTROL_PASSTHROUGH']
    # when true and source image response contains Expires or Cache-Control headers, reuse those headers
    cacheControlPassthrough: false

    # ENV['IMGPROXY_SET_CANONICAL_HEADER']
    # when true and the source image has http or https scheme, set rel="canonical" HTTP header to the value of the source image URL.
    setCanonicalHeader: false

    # ENV['IMGPROXY_SO_REUSEPORT']
    # when true, enables SO_REUSEPORT socket option (currently on linux and darwin only)
    soReuseport: false

    # ENV['IMGPROXY_PATH_PREFIX']
    # URL path prefix.
    # Example: when set to /abc/def, imgproxy URL will be /abc/def/%signature/%processing_options/%source_url
    pathPrefix: ""

    # ENV['IMGPROXY_USER_AGENT']
    # User-Agent header that will be sent with source image request.
    # Default: imgproxy/%current_version
    userAgent: ""

    # ENV['IMGPROXY_USE_ETAG']
    # When true, enables using ETag header for the cache control
    useEtag: false

    # ENV['IMGPROXY_ETAG_BUSTER']
    # (v3.1+) Change this to change ETags for all the images.
    etagBuster: ""

    # ENV['IMGPROXY_CUSTOM_REQUEST_HEADERS']
    # PRO: list of custom headers that imgproxy will send while requesting the source image, divided by \;
    # (can be redefined by IMGPROXY_CUSTOM_HEADERS_SEPARATOR)
    customRequestHeaders: ""

    # ENV['IMGPROXY_CUSTOM_RESPONSE_HEADERS']
    # PRO: list of custom response headers, divided by \; (can be redefined by IMGPROXY_CUSTOM_HEADERS_SEPARATOR)
    customResponseHeaders: ""

    # ENV['IMGPROXY_CUSTOM_HEADERS_SEPARATOR']
    # PRO: string that will be used as a custom headers separator;
    customHeadersSeparator: ";"

    # ENV['IMGPROXY_REQUEST_HEADERS_PASSTHROUGH']
    # (3.16+, Pro) A comma separated list of names of incoming request headers
    # that should be passed through to the source image request.
    requestHeadersPassthrough: ""

    # ENV['IMGPROXY_RESPONSE_HEADERS_PASSTHROUGH']
    # (3.16+, Pro) A comma-separated list of names of source image response headers
    # that should be passed through to the imgproxy response.
    responseHeadersPassthrough: ""

    # ENV['IMGPROXY_ENABLE_DEBUG_HEADERS']
    # when true, imgproxy will add X-Origin-Content-Length header with the value is size of the source image.
    enableDebugHeaders: false

    # ENV['IMGPROXY_SERVER_NAME']
    # (v3.3+, Pro) The Server header value. Default: `imgproxy`
    name: ""

  # https://docs.imgproxy.net/configuration?id=security
  security:

    # ENV['IMGPROXY_SECRET']
    # the authorization token. If specified, the HTTP request should contain the `Authorization: Bearer %secret%` header
    secret: ""

    # ENV['IMGPROXY_MAX_SRC_RESOLUTION']
    # the maximum resolution of the source image, in megapixels. Images with larger actual size will be rejected.
    maxSrcResolution: "16.8"

    # ENV['IMGPROXY_MAX_SRC_FILE_SIZE']
    # The maximum size of the source image, in bytes. Images with larger file size will be rejected.
    # When `0`, file size check is disabled.
    maxSrcFileSize: "0"

    # ENV['IMGPROXY_MAX_ANIMATION_FRAMES']
    # the maximum of animated image frames to being processed.
    maxAnimationFrames: "1"

    # ENV['IMGPROXY_MAX_ANIMATION_FRAME_RESOLUTION']
    # The maximum resolution of the animated source image frame, in megapixels.
    # Images with larger actual frame size will be rejected.
    # When set to 0, imgproxy will test the whole animated image resolution
    # against IMGPROXY_MAX_SRC_RESOLUTION summarising all the frames’ resolutions.
    # Default: 0
    maxAnimationFrameResolution: 0

    # ENV['IMGPROXY_MAX_SVG_CHECK_BYTES']
    # the maximum number of bytes imgproxy will read to recognize SVG.
    # If imgproxy can't recognize your SVG, try to increase this number.
    maxSvgCheckBytes: "32768" # 32KB

    # ENV['IMGPROXY_MAX_REDIRECTS']
    # (v3.3+) Requests to some image sources may go through too many redirects or enter an infinite loop.
    # The max number of redirects imgproxy can follow while requesting the source image.
    maxRedirects: ""

    # ENV['IMGPROXY_SOURCE_URL_ENCRYPTION_KEY']
    # hex-encoded key used for source URL encryption
    sourceUrlEncryptionKey: ""

    # ENV['IMGPROXY_ALLOW_ORIGIN']
    # when set, enables CORS headers with provided origin. CORS headers are disabled by default.
    allowOrigin: false

    # ENV['IMGPROXY_ALLOWED_SOURCES']
    # whitelist of source image URLs prefixes divided by comma. When blank, imgproxy allows all source image URLs.
    # Example: `s3://,https://example.com/,local://`.
    allowedSources: ""

    # ENV['IMGPROXY_ALLOW_LOOPBACK_SOURCE_ADDRESSES']
    # when true, allows connecting to loopback IP addresses
    # (127.0.0.1-127.255.255.255 and IPv6 analogues) when requesting source images.
    # Default: false
    allowLoopbackSourceAddresses: ~

    # ENV['IMGPROXY_ALLOW_LINK_LOCAL_SOURCE_ADDRESSES']
    # when true, allows connecting to link-local multicast and unicast IP addresses
    # (224.0.0.1-224.0.0.255, 169.254.0.1-169.254.255.255, and IPv6 analogues)
    # when requesting source images.
    # Default: false
    allowLinkSourceAddresses: ~

    # ENV['IMGPROXY_ALLOW_PRIVATE_SOURCE_ADDRESSES']
    # when true, allows connecting to private IP addresses
    # (10.0.0.0 - 10.255.255.255, 172.16.0.0 - 172.31.255.255, 192.168.0.0 - 192.168.255.255,
    # and IPv6 analogues) when requesting source images.
    # Default: true
    allowPrivateSourceAddresses: true

    # ENV['IMGPROXY_SANITIZE_SVG']
    # (v3.6+) when true (default), imgproxy will remove scripts from SVG images to prevent XSS attacks.
    sanitizeSvg: true

    # ENV['IMGPROXY_IGNORE_SSL_VERIFICATION']
    # when true, disables SSL verification, so imgproxy can be used in a development environment with self-signed SSL certificates.
    ignoreSslVerification: false

    # ENV['IMGPROXY_ALLOW_SECURITY_OPTIONS']
    # when true, allows usage of security-related processing options such as `max_src_resolution`,
    # `max_src_file_size`, `max_animation_frames`, and `max_animation_frame_resolution`.
    # Default: `false`.
    allowSecurityOptions: false

    # ENV['IMGPROXY_DEVELOPMENT_ERRORS_MODE']
    # when true, imgproxy will respond with detailed error messages.
    # Not recommended for production because some errors may contain stack trace.
    developmentErrorsMode: ""

  # https://docs.imgproxy.net/configuration?id=cookies
  cookies:

    # ENV['IMGPROXY_COOKIE_PASSTHROUGH']
    # when true, incoming cookies will be passed through to the image request
    # if they are applicable for the image URL
    enabled: false

    # ENV['IMGPROXY_COOKIE_BASE_URL']
    # when set, assume that cookies have a scope of this URL for the incoming request
    # (instead of using the request headers).
    # If the cookies are applicable to the image URL too,
    # they will be passed along in the image request.
    baseUrl: ""

  # https://docs.imgproxy.net/configuration?id=compression
  compression:

    # ENV['IMGPROXY_QUALITY']
    # default quality of the resulting image, percentage.
    quality: "80"

    # ENV['IMGPROXY_FORMAT_QUALITY']
    # default quality of the resulting image per format, comma divided.
    # Example: `jpeg=70,avif=40,webp=60`. When value for the resulting format is not set, `IMGPROXY_QUALITY` value is used.
    # Default value: `avif=65`
    formatQuality: ""

    # ENV['IMGPROXY_GZIP_COMPRESSION']
    # GZip compression level (skipped in imgproxy v3.0.0+)
    gzipCompression: "5"

    # ENV['IMGPROXY_JPEG_PROGRESSIVE']
    # when true, enables progressive JPEG compression.
    jpegProgressive: false

    # ENV['IMGPROXY_JPEG_NO_SUBSAMPLE']
    # PRO: when true, chrominance subsampling is disabled. This will improve quality at the cost of larger file size.
    jpegNoSubsample: false

    # ENV['IMGPROXY_JPEG_TRELLIS_QUANT']
    # PRO: when true, enables trellis quantisation for each 8x8 block. Reduces file size but increases compression time.
    jpegTrellisQuant: false

    # ENV['IMGPROXY_JPEG_OVERSHOOT_DERINGING']
    # PRO: when true, enables overshooting of samples with extreme values.
    # Overshooting may reduce ringing artifacts from compression, in particular in areas where black text appears on a white background.
    jpegOvershootDeringing: false

    # ENV['IMGPROXY_JPEG_OPTIMIZE_SCANS']
    # PRO: when true, split the spectrum of DCT coefficients into separate scans.
    # Reduces file size but increases compression time. Requires `IMGPROXY_JPEG_PROGRESSIVE` to be true.
    jpegOptimizeScans: false

    # ENV['IMGPROXY_JPEG_QUANT_TABLE']
    # PRO: quantization table to use. Supported values are 0-8 (see documentation for details)
    # 0: Table from JPEG Annex K (default);
    # 1: Flat table;
    # 2: Table tuned for MSSIM on Kodak image set;
    # 3: Table from ImageMagick by N. Robidoux;
    # 4: Table tuned for PSNR-HVS-M on Kodak image set;
    # 5: Table from Relevance of Human Vision to JPEG-DCT Compression (1992);
    # 6: Table from DCTune Perceptual Optimization of Compressed Dental X-Rays (1997);
    # 7: Table from A Visual Detection Model for DCT Coefficient Quantization (1993);
    # 8: Table from An Improved Detection Model for DCT Coefficient Quantization (1993).
    jpegQuantTable: "0"

    # ENV['IMGPROXY_PNG_INTERLACED']
    # when true, enables interlaced PNG compression.
    pngInterlaced: false

    # ENV['IMGPROXY_PNG_QUANTIZE']
    # when true, enables PNG quantization.
    pngQuantize: false

    # ENV['IMGPROXY_PNG_QUANTIZATION_COLORS']
    # maximum number of quantization palette entries. Should be between 2 and 256.
    pngQuantizationColors: "256"

    # ENV['IMGPROXY_GIF_OPTIMIZE_FRAMES']
    # PRO: when true, enables GIF frames optimization. This may produce a smaller result, but may increase compression time.
    gifOptimizeFrames: false

    # ENV['IMGPROXY_GIF_OPTIMIZE_TRANSPARENCY']
    # PRO: when true, enables GIF transparency optimization. This may produce a smaller result, but may increase compression time.
    gifOptimizeTransparency: false

    # ENV['IMGPROXY_WEBP_COMPRESSION']
    # PRO: The compression method to use. Supported values are lossy, near_lossless, and lossless. Default: lossy
    webpCompression: ~

    # ENV['IMGPROXY_AVIF_SPEED']
    # controls the CPU effort spent improving compression. 0 slowest - 9 fastest.
    avifSpeed: "9"

  # PRO, v3+: calculate quality for your resulting images so they fit the selected metric the best.
  # https://docs.imgproxy.net/autoquality?id=autoquality
  autoquality:

    # ENV['IMGPROXY_AUTOQUALITY_METHOD']
    # Enabled values: none | size | dssim | ml
    # Default: none
    method: none

    # ENV['IMGPROXY_AUTOQUALITY_TARGET']
    # desired value of the autoquality method metric. Default: 0.02.
    # MUST be positive unless the method is 'none'
    targetValue: "0.02"

    # ENV['IMGPROXY_AUTOQUALITY_MIN']
    # Minimal quality imgproxy can use. Default: 70.
    # Change value to the desired size in bytes
    minValue: "70"

    # ENV['IMGPROXY_AUTOQUALITY_MAX']
    # Maximal quality imgproxy can use. Default: 80.
    # Change value to the desired size in bytes
    maxValue: "80"

    # ENV['IMGPROXY_AUTOQUALITY_FORMAT_MIN']
    # Minimal quality imgproxy can use per format, comma divided. Default: 'avif=40'
    # @example Quality 40 for AVIF is pretty the same as 70 for JPEG
    #  formatMin: "avif=40,jpeg=70"
    formatMin: "avif=40"

    # ENV['IMGPROXY_AUTOQUALITY_FORMAT_MAX']
    # Maximal quality imgproxy can use per format, comma divided. Default: 'avif=50'
    # @example Quality 50 for AVIF is pretty the same as 80 for JPEG
    #  formatMax: "avif=50,jpeg=80"
    formatMax: "avif=50"

    # ENV['IMGPROXY_AUTOQUALITY_ALLOWED_ERROR']
    # allowed IMGPROXY_AUTOQUALITY_TARGET error. Applicable only to dssim and ml methods.
    # Default: 0.001.
    allowedError: "0.001"

    # ENV['IMGPROXY_AUTOQUALITY_MAX_RESOLUTION']
    # When value is greater then zero and the result resolution exceeds the value, autoquality won’t be used.
    # Default: 0.
    maxResolution: "0"

    # Neural networks paths for JPEG, WebP, and AVIF:

    # ENV['IMGPROXY_AUTOQUALITY_JPEG_NET']
    # Neural networks path for JPEG (applied to 'ml' method only).
    # Example:
    #   webpNet: "/networks/autoquality-jpeg.pb")
    jpegNet:

    # ENV['IMGPROXY_AUTOQUALITY_WEBP_NET']
    # Neural networks path for WEBP (applied to 'ml' method only).
    # Example:
    #   webpNet: "/networks/autoquality-webp.pb")
    webpNet:

    # ENV['IMGPROXY_AUTOQUALITY_AVIF_NET']
    # Neural networks path for AVIF (applied to 'ml' method only).
    # Example:
    #   webpNet: "/networks/autoquality-avif.pb")
    avifNet:

  # https://docs.imgproxy.net/configuration?id=avifwebp-support-detection
  formatsSupportDetection:

    # Enforce/enable webP detection/usage
    webp:

      # ENV['IMGPROXY_ENABLE_WEBP_DETECTION']
      # enables WebP support detection.
      # When the file extension is omitted in the imgproxy URL and browser supports WebP, imgproxy will use it as the resulting format
      enabled: false

      # ENV['IMGPROXY_ENFORCE_WEBP']
      # enables WebP support detection and enforces WebP usage. If the browser supports WebP, it will be used as resulting format even if another extension is specified in the imgproxy URL.
      enforced: false

    # Enforce/enable AVIF detection/usage
    avif:

      # ENV['IMGPROXY_ENABLE_AVIF_DETECTION']
      # enables AVIF support detection. When the file extension is omitted in the imgproxy URL and browser supports AVIF, imgproxy will use it as the resulting format
      enabled: false

      # ENV['IMGPROXY_ENFORCE_AVIF']
      # enables AVIF support detection and enforces AVIF usage. If the browser supports AVIF, it will be used as resulting format even if another extension is specified in the imgproxy URL.
      enforced: false

  # https://docs.imgproxy.net/configuration?id=client-hints-support
  clientHintsSupport:

    # ENV['IMGPROXY_ENABLE_CLIENT_HINTS']
    # enables Client Hints support to determine default width and DPR options.
    enabled: false

  # https://docs.imgproxy.net/configuration?id=video-thumbnails
  videoThumbnails:

    # ENV['IMGPROXY_ENABLE_VIDEO_THUMBNAILS']
    # PRO: then true, enables video thumbnails generation.
    enabled: false

    # ENV['IMGPROXY_VIDEO_THUMBNAIL_SECOND']
    # PRO: the timestamp of the frame in seconds that will be used for a thumbnail.
    second: "1"

    # ENV['IMGPROXY_VIDEO_THUMBNAIL_PROBE_SIZE']
    # PRO: the maximum amount of bytes used to determine the format. Lower values can decrease memory usage but can produce inaccurate data or even lead to errors.
    probeSize: "5000000"

    # ENV['IMGPROXY_VIDEO_THUMBNAIL_MAX_ANALYZE_DURATION']
    # PRO: the maximum of milliseconds used to get the stream info. Low values can decrease memory usage but can produce inaccurate data or even lead to errors. When set to 0, the heuristic is used.
    maxAnalyzeDuration: "0"

  # https://docs.imgproxy.net/configuration?id=watermark
  watermark:

    # ENV['IMGPROXY_WATERMARK_DATA']
    # Base64-encoded image data. You can easily calculate it with `base64 tmp/watermark.png | tr -d '\n'`
    data: ""

    # ENV['IMGPROXY_WATERMARK_PATH']
    # path to the locally stored image
    path: ""

    # ENV['IMGPROXY_WATERMARK_URL']
    # watermark image URL
    url: ""

    # ENV['IMGPROXY_WATERMARK_OPACITY']
    # watermark base opacity
    opacity: "1"

    # ENV['IMGPROXY_WATERMARKS_CACHE_SIZE']
    # PRO: size of custom watermarks cache. When set to `0`, watermarks cache is disabled.
    cacheSize: "256"

  # https://docs.imgproxy.net/configuration?id=unsharpening
  unsharpening:

    # ENV['IMGPROXY_UNSHARPENING_MODE']
    # PRO: controls when unsharpenning mask should be applied.
    # The following modes are supported: `auto`, `none`, `always'
    mode: auto

    # ENV['IMGPROXY_UNSHARPENING_WEIGHT']
    # PRO: a floating-point number that defines how neighbor pixels will affect the current pixel.
    # The greater the value the sharper the image. Should be greater than zero.
    weight: "1"

    # ENV['IMGPROXY_UNSHARPENING_DIVIDOR']
    # PRO: a floating-point number that defines the unsharpening strength.
    # The lesser the value the sharper the image. Should be greater than zero.
    dividor: "24"

  # PRO, v3+: Detect objects on the image and use them for smart crop,
  # bluring the detections, or drawing the detections.
  # https://docs.imgproxy.net/configuration?id=object-detection
  objectDetection:

    # If the object detection is enabled
    enabled: false

    # ENV['IMGPROXY_OBJECT_DETECTION_CONFIG']
    # Path to the neural network config.
    # Required if detection is enabled.
    config:

    # ENV['IMGPROXY_OBJECT_DETECTION_WEIGHTS']
    # Path to the neural network weights.
    # Required if detection is enabled.
    weights:

    # ENV['IMGPROXY_OBJECT_DETECTION_CLASSES']
    # Path to the text file with the classes names, one by line.
    # Required if detection is enabled.
    classes:

    # ENV['IMGPROXY_OBJECT_DETECTION_NET_SIZE']
    # The size of the neural network input.
    # The width and the heights of the inputs should be the same,
    # so this config value should be a single number. Default: 416.
    netSize: "416"

    # ENV['IMGPROXY_OBJECT_DETECTION_CONFIDENCE_THRESHOLD']
    # The detections with confidences below this value will be discarded. Default: 0.2.
    confidenceThreshold: "0.2"

    # ENV['IMGPROXY_OBJECT_DETECTION_NMS_THRESHOLD']
    # Non max supression threshold. Don’t change this if you don’t know what you’re doing.
    # Default: 0.4.
    nmsThreshold: "0.4"

  # PRO, v3.14+
  # https://docs.imgproxy.net/latest/configuration?id=smart-crop
  smartCrop:

    # ENV['IMGPROXY_SMART_CROP_ADVANCED']
    # When true, enables usage of the advanced smart crop method.
    # Advanced smart crop may take more time than regular one, yet it produces better results.
    advanced: false

    # ENV['IMGPROXY_SMART_CROP_FACE_DETECTION']
    # When true, adds an additional fast face detection step to smart crop.
    faceDetection: false

  # https://docs.imgproxy.net/configuration?id=fallback-image
  fallbackImage:

    # ENV['IMGPROXY_FALLBACK_IMAGE_DATA']
    # Base64-encoded image data. You can easily calculate it with `base64 tmp/fallback.png | tr -d '\n'`
    data: ""

    # ENV['IMGPROXY_FALLBACK_IMAGE_URL']
    # fallback image URL.
    url: ""

    # ENV['IMGPROXY_FALLBACK_IMAGE_HTTP_CODE']
    # (v3+) HTTP code for the fallback image response. Default: 200
    httpCode: "200"

    # ENV['IMGPROXY_FALLBACK_IMAGE_TTL']
    # (v3.4+) A duration (in seconds) sent via the Expires and Cache-Control:
    # max-age HTTP headers when a fallback image was used.
    # When blank or 0, the value from IMGPROXY_TTL is used.
    ttl: ""

    # ENV['IMGPROXY_FALLBACK_IMAGES_CACHE_SIZE']
    # PRO v3+: size of custom fallback images cache.
    #   When set to 0, fallback images cache is disabled.
    #   By default 256 fallback images are cached.
    cacheSize: "256"

  formats:
    # https://docs.imgproxy.net/configuration?id=preferred-formats
    # ENV['IMGPROXY_PREFERRED_FORMATS']
    # a list of preferred formats, comma divided.
    # Default: `jpeg,png,gif`
    preferred: jpeg,png,gif

    # ENV['IMGPROXY_SKIP_PROCESSING_FORMATS']
    # list of formats that imgproxy shouldn't process, comma-divided.
    skipProcessing: ""

  skipProcessing:

    # DEPRECATED: to be removed in v0.9.0
    # Use `formats.skipProcessing` instead
    # ENV['IMGPROXY_SKIP_PROCESSING_FORMATS']
    # list of formats that imgproxy shouldn't process, comma-divided.
    formats: ""

  # https://docs.imgproxy.net/configuration?id=presets
  presets:

    # ENV['IMGPROXY_PRESETS']
    # set of preset definitions, comma-divided.
    # Example: `default=resizing_type:fill/enlarge:1,sharp=sharpen:0.7,blurry=blur:2`.
    definitions: ""

    # ENV['IMGPROXY_ONLY_PRESETS']
    # disable all URL formats and enable presets-only mode.
    onlyPresets: false

  # https://docs.imgproxy.net/configuration?id=serving-files-from-amazon-s3
  aws:

    # ENV['IMGPROXY_USE_S3']
    # when `true`, enables image fetching from Amazon S3 buckets.
    enabled: false

    # AWS account id (required for authentication using IAM Role)
    accountId: ""

    # ENV['AWS_ACCESS_KEY_ID']
    # AWS key
    accessKeyId: ""

    # ENV['AWS_SECRET_ACCESS_KEY']
    # AWS secret
    secretAccessKey: ""

    # ENV['IMGPROXY_S3_ASSUME_ROLE_ARN']
    # (3.17+) The AWS IAM Role to Assume
    iamRoleName: ""

    # ENV['IMGPROXY_S3_REGION']
    # AWS region
    s3Region: ""

    # ENV['IMGPROXY_S3_ENDPOINT']
    # custom S3 endpoint to being used by imgproxy.
    s3Endpoint: ""

  # https://docs.imgproxy.net/configuration?id=serving-files-from-google-cloud-storage
  gcs:

    # Enable GCS as backend for images
    enabled: false

    # ENV['IMGPROXY_GCS_KEY']
    # Google Cloud JSON key.
    jsonKey: ""

    # ENV['IMGPROXY_GCS_ENDPOINT']
    # (v3.4+) A custom Google Cloud Storage endpoint to being used by imgproxy.
    endpoint: ""

  # https://docs.imgproxy.net/configuration?id=serving-files-from-azure-blob-storage
  abs:

    # ENV['IMGPROXY_USE_ABS']
    # when `true`, enables image fetching from Azure Blob Storage (ABS) containers.
    enabled: false

    # ENV['IMGPROXY_ABS_NAME']
    # Azure account name.
    accountName: ""

    # ENV['IMGPROXY_ABS_KEY']
    # Azure account key.
    accountKey: ""

    # ENV['IMGPROXY_ABS_ENDPOINT']
    # custom Azure Blob Storage endpoint to be used by imgproxy.
    endpoint: ""

  # https://docs.imgproxy.net/configuration?id=new-relic-metrics
  newRelic:

    enabled: false

    # ENV['IMGPROXY_NEW_RELIC_KEY']
    # New Relic license key
    licenseKey: ""

    # ENV['IMGPROXY_NEW_RELIC_APP_NAME']
    # New Relic application name. Default: `imgproxy`.
    appName: ""

    # ENV['IMGPROXY_NEW_RELIC_LABELS']
    # The list of New Relic labels, semicolon divided.
    labels: ""

  # https://docs.imgproxy.net/configuration?id=prometheus-metrics
  prometheus:

    enabled: false

    # ENV['IMGPROXY_PROMETHEUS_NAMESPACE']
    # Namespace (prefix) for imgproxy metrics.
    namespace: ""

    # ENV['IMGPROXY_PROMETHEUS_BIND']
    # This value is set to ':8081' (not editable)

  # Integration to Datadog (v3+)
  # https://docs.imgproxy.net/configuration?id=datadog-metrics
  datadog:

    # ENV['IMGPROXY_DATADOG_ENABLE']
    # When provided, enables error reporting to Datadog
    enabled: false

    # ENV['DD_AGENT_HOST']
    # Sets the address to connect to for sending metrics to the Datadog Agent.
    # Default: localhost
    agentHost: localhost

    # ENV['DD_TRACE_AGENT_PORT']
    # Sets the Datadog Agent Trace port. Default: 8126
    agentPort: "8126"

    # ENV['DD_DOGSTATSD_PORT']
    # Set the DogStatsD port. Default: 8125
    dogStatsdPort: "8125"

    # ENV['DD_SERVICE']
    # Sets desired application name. Default: imgproxy
    service: imgproxy

    # ENV['DD_ENV']
    # Sets the environment to which all traces will be submitted. Default: empty
    env:

    # ENV['DD_TRACE_REPORT_HOSTNAME']
    # When true, sets hostname to Hostname() with which to mark outgoing traces.
    # Default: false
    reportHostname: false

    # ENV['DD_TRACE_SOURCE_HOSTNAME']
    # Allows specifying the hostname with which to mark outgoing traces. Default: empty
    sourceHostname:

    # ENV['DD_TAGS']
    # Sets a key/value pair which will be set as a tag on all traces. Default: empty
    # Example:
    #   DD_TAGS=datacenter:njc,key2:value2.
    tags:

    # ENV['DD_TRACE_ANALYTICS_ENABLED']
    # Allows specifying whether Trace Search & Analytics should be enabled for integrations.
    # Default: false
    analyticsEnabled: false

    # ENV['DD_RUNTIME_METRICS_ENABLED']
    # Enables automatic collection of runtime metrics every 10 seconds.
    # Default: false
    metricsEnabled: false

    # ENV['DD_TRACE_STARTUP_LOGS']
    # Causes various startup info to be written when the tracer starts.
    # Default: true
    traceStartupLogs: true

    # ENV['DD_TRACE_DEBUG']
    # Enables detailed logs. Default: false
    traceDebug: false

    # ENV['IMGPROXY_DATADOG_ENABLE_ADDITIONAL_METRICS]
    # When true, enables sending the additional metrics to Datadog. Default: false
    #️Warning: Since the additional metrics are treated by Datadog as custom,
    # Datadog can additionally bill you for their usage.
    enableAdditionalMetrics: false

  # https://docs.imgproxy.net/configuration?id=opentelemetry-metrics
  openTelemetry:

    # ENV['IMGPROXY_OPEN_TELEMETRY_ENABLE_METRICS']
    # When `true`, imgproxy will send metrics over OpenTelemetry Metrics API. Default: `false`
    enabled: false

    # ENV['IMGPROXY_OPEN_TELEMETRY_ENDPOINT']
    # OpenTelemetry collector endpoint (`host:port`). Default: blank
    endpoint: ~

    # ENV['IMGPROXY_OPEN_TELEMETRY_PROTOCOL']
    # OpenTelemetry collector protocol. Supported protocols are `grpc`, `https`, and `http`. Default: `grpc`
    protocol: grpc

    # ENV['IMGPROXY_OPEN_TELEMETRY_SERVICE_NAME']
    # OpenTelemetry service name. Default: `imgproxy`
    serviceName: imgproxy

    # ENV['IMGPROXY_OPEN_TELEMETRY_SERVER_CERT']
    # OpenTelemetry collector TLS certificate, PEM-encoded. Default: blank
    serverCert: ~

    # ENV['IMGPROXY_OPEN_TELEMETRY_CLIENT_CERT']
    # OpenTelemetry client TLS certificate, PEM-encoded. Default: blank
    clientCert: ~

    # ENV['IMGPROXY_OPEN_TELEMETRY_CLIENT_KEY']
    # OpenTelemetry client TLS key, PEM-encoded. Default: blank
    clientKey: ~

    # ENV['IMGPROXY_OPEN_TELEMETRY_GRPC_INSECURE']
    # When true, imgproxy will use an insecure GRPC connection unless the collector TLS certificate is not provided.
    # Default: true
    grpcInsecure: ~

    # ENV['IMGPROXY_OPEN_TELEMETRY_PROPAGATORS']
    # A list of OpenTelemetry text map propagators, comma divided.
    # Supported propagators are `tracecontext`, `baggage`, `b3`, `b3multi`, `jaeger`, `xray`, and `ottrace`.
    # Default: blank
    propagators: ~

    # ENV['IMGPROXY_OPEN_TELEMETRY_TRACE_ID_GENERATOR']
    # OpenTelemetry trace ID generator. Supported generators are xray and random. Default: xray
    traceIdGenerator: ~

    # ENV['IMGPROXY_OPEN_TELEMETRY_CONNECTION_TIMEOUT']
    # The maximum duration (in seconds) for establishing a connection to the OpenTelemetry collector. Default: `5`
    connectionTimeout: 5

  # https://docs.imgproxy.net/latest/cloud_watch?id=amazon-cloudwatch
  amazonCloudWatch:

    # ENV['IMGPROXY_CLOUD_WATCH_SERVICE_NAME']
    # The value of the ServiceName dimension which will be used in the metrics. Default: blank
    serviceName: ~

    # ENV['IMGPROXY_CLOUD_WATCH_NAMESPACE']
    # The CloudWatch namespace for the metrics
    namespace: ~

    # ENV['IMGPROXY_CLOUD_WATCH_REGION']
    # The code of the AWS region to which the metrics should be sent
    region: ~

  # https://docs.imgproxy.net/configuration?id=error-reporting
  errorReporting:

    # Integration to Bugsnag
    bugsnag:

      # When provided, enables error reporting to Bugsnag
      enabled: false

      # ENV['IMGPROXY_BUGSNAG_KEY']
      # Bugsnag API key
      key: ""

      # ENV['IMGPROXY_BUGSNAG_STAGE']
      # Bugsnag stage to report to.
      env: "production"

    # Integration to Honeybadger
    honeybadger:

      # When provided, enables error reporting to Honeybadger
      enabled: false

      # ENV['IMGPROXY_HONEYBADGER_KEY']
      # Honeybadger API key.
      key: ""

      # ENV['IMGPROXY_HONEYBADGER_ENV']
      # Honeybadger env to report to.
      env: "production"

    # Integration to Sentry
    sentry:

      #  When provided, enables error reporting to Sentry
      enabled: false

      # ENV['IMGPROXY_SENTRY_DSN']
      # Sentry project DSN.
      dsn: ""

      # ENV['IMGPROXY_SENTRY_ENVIRONMENT']
      # Sentry environment to report to. Default: `production`
      env: "production"

      # ENV['IMGPROXY_SENTRY_RELEASE']
      # Sentry release to report to. Default: `imgproxy/{imgproxy version}`
      release: ""

    # ENV['IMGPROXY_REPORT_DOWNLOADING_ERRORS']
    # when `true`, imgproxy will report downloading errors.
    reportDownloadingErrors: true

  # https://docs.imgproxy.net/configuration?id=log
  logging:

    # ENV['IMGPROXY_LOG_FORMAT']
    # the log format. The following formats are supported: pretty, structured, json, gcp
    # - pretty: (default) colored human-readable format;
    # - structured: machine-readable format;
    # - json: JSON format;
    # - gcp: Google Cloud Logging agent compliant format
    format: "pretty"

    # ENV['IMGPROXY_LOG_LEVEL']
    # the log level. The following levels are supported `error`, `warn`, `info` and `debug`.
    level: "info"

    # Enable Syslog integration
    #
    syslog:

      # ENV['IMGPROXY_SYSLOG_ENABLE']
      # when `true`, enables sending logs to syslog
      enabled: false

      # ENV['IMGPROXY_SYSLOG_LEVEL']
      # maximum log level to send to syslog. Known levels are: `crit`, `error`, `warning` and `info`.
      level: "info"

      # ENV['IMGPROXY_SYSLOG_NETWORK']
      # network that will be used to connect to syslog. When blank, the local syslog server will be used. Known networks are `tcp`, `tcp4`, `tcp6`, `udp`, `udp4`, `udp6`, `ip`, `ip4`, `ip6`, `unix`, `unixgram` and `unixpacket`.
      network: "tcp"

      # ENV['IMGPROXY_SYSLOG_ADDRESS']
      # address of the syslog service. Not used if `IMGPROXY_SYSLOG_NETWORK` is blank.
      address: ""

      # ENV['IMGPROXY_SYSLOG_TAG']
      # specific syslog tag.
      tag: "imgproxy"

  # https://docs.imgproxy.net/configuration?id=memory-usage-tweaks
  memoryUsageTweaks:

    # ENV['IMGPROXY_DOWNLOAD_BUFFER_SIZE']
    # the initial size (in bytes) of a single download buffer. When zero, initializes empty download buffers.
    downloadBufferSize: "0"

    # ENV['IMGPROXY_GZIP_BUFFER_SIZE']
    # the initial size (in bytes) of a single GZip buffer. When zero, initializes empty GZip buffers. Makes sense only when GZip compression is enabled.
    gzipBufferSize: "0"

    # ENV['IMGPROXY_FREE_MEMORY_INTERVAL']
    # the interval (in seconds) at which unused memory will be returned to the OS.
    freeMemoryInterval: "10"

    # ENV['IMGPROXY_BUFFER_POOL_CALIBRATION_THRESHOLD']
    # the number of buffers that should be returned to a pool before calibration.
    bufferPoolCalibrationThreshold: "1024"

  # https://docs.imgproxy.net/configuration?id=miscellaneous
  miscellaneous:

    # ENV['IMGPROXY_BASE_URL']
    # base URL prefix that will be added to every requested image URL. For example, if the base URL is `http://example.com/images` and `/path/to/image.png` is requested, imgproxy will download the source image from `http://example.com/images/path/to/image.png`.
    baseUrl: ""

    # ENV['IMGPROXY_URL_REPLACEMENTS']
    # (3.17+) A list of pattern=replacement pairs, semicolon (;) divided.
    # imgproxy will replace source URL prefixes matching the pattern with the corresponding replacement.
    # Wildcards can be included in patterns with * to match all characters except /.
    # ${N} in replacement strings will be replaced with wildcard values, where N is the number of the wildcard.
    # See examples at https://docs.imgproxy.net/configuration?id=source-image-urls
    urlReplacements: ""

    # ENV['IMGPROXY_USE_LINEAR_COLORSPACE']
    # when `true`, imgproxy will process images in linear colorspace. This will slow down processing. Note that images won't be fully processed in linear colorspace while shrink-on-load is enabled (see below).
    useLinearColorspace: false

    # ENV['IMGPROXY_DISABLE_SHRINK_ON_LOAD']
    # when `true`, disables shrink-on-load for JPEG and WebP. Allows to process the whole image in linear colorspace but dramatically slows down resizing and increases memory usage when working with large images.
    disableShrinkOnLoad: false

    # ENV['IMGPROXY_STRIP_METADATA']
    # when `true`, imgproxy will strip all metadata (EXIF, IPTC, etc.) from JPEG and WebP output images.
    stripMetadata: true

    # ENV['IMGPROXY_KEEP_COPYRIGHT']
    # (v3.5+) When `true`, imgproxy will not remove copyright info while stripping metadata. Default: `true`
    keepCopyright: true

    # ENV['IMGPROXY_STRIP_METADATA_DPI']
    # (v3.18+, Pro) The DPI metadata value that should be set for the image when its metadata is stripped. Default: 72.0
    stripMetadataDPI: 72.0

    # ENV['IMGPROXY_STRIP_COLOR_PROFILE']
    # when `true`, imgproxy will transform the embedded color profile (ICC) to sRGB and remove it from the image. Otherwise, imgproxy will try to keep it as is.
    stripColorProfile: true

    # ENV['IMGPROXY_AUTO_ROTATE']
    # when `true`, imgproxy will auto rotate images based on the EXIF Orientation parameter (if available in the image meta data). The orientation tag will be removed from the image anyway.
    autoRotate: true

    # ENV['IMGPROXY_ENFORCE_THUMBNAIL']
    # (v3.5+) When `true` and the source image has an embedded thumbnail, imgproxy will always use the embedded thumbnail instead of the main image.
    # Currently, only thumbnails embedded in `heic` and `avif` are supported. Default: `false`
    enforceThumbnail: false

    # ENV['IMGPROXY_RETURN_ATTACHMENT']
    # (v3.6+) when true, response header Content-Disposition will include attachment. Default: false
    returnAttachment: false

    # ENV['IMGPROXY_SVG_FIX_UNSUPPORTED']
    # (v3.9+) when `true`, imgproxy will try to replace SVG features unsupported by librsvg
    # to minimize SVG rendering error. This config only takes effect on SVG rasterization.
    # Default: `false`
    svgFixUnsupported: false

    healthCheck:

      # ENV['IMGPROXY_HEALTH_CHECK_MESSAGE']
      # (v3.3+, Pro) The content of the health check response
      message: ""

      # ENV['IMGPROXY_HEALTH_CHECK_PATH']
      # (v3.3+) An additional path of the health check.
      path: ""

  # In this section you can add custom env variables
  # to support newest features of imgproxy in the older versions of imgproxy-helm
  #
  # Example:
  # custom:
  #   IMGPROXY_FOO: bar
  custom: {}
